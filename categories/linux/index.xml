<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    Linux on
                
            
            fd3kyt&#39;s blog</title>
        <link>https://fd3kyt.github.io/categories/linux/</link>
        <description>Recent content  in Linux
            on fd3kyt&#39;s blog</description>
        <language>en-us</language>
        <lastBuildDate>Thu, 07 Jun 2018 10:45:54 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://fd3kyt.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
            
            <item>
                <title>Implementation of Epoll</title>
                <link>https://fd3kyt.github.io/posts/implementation-of-epoll/</link>
                <description>

&lt;p&gt;There are many articles about the usage and/or implementation of epoll
on the web now. However, I think that some straightforward summary I
want and some details that I am interested in are still missing. So I
write this post.&lt;/p&gt;

&lt;h2 id=&#34;note&#34;&gt;note&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;based on the source code of Linux Kernel v4.16&lt;/li&gt;
&lt;li&gt;suppose that readers know about the usage of epoll.&lt;/li&gt;
&lt;/ul&gt;





&lt;figure&gt;
    
         
            
            
            &lt;img src=&#34;https://fd3kyt.github.io/ox-hugo/screenshot_2018-05-27_11-48-53.png&#34;
        
             alt=&#34;/ox-hugo/screenshot_2018-05-27_11-48-53.png&#34;/&gt;
        
        
&lt;/figure&gt;


&lt;h2 id=&#34;prerequisite&#34;&gt;prerequisite&lt;/h2&gt;

&lt;h3 id=&#34;poll-operation-of-file&#34;&gt;poll() operation of file&lt;/h3&gt;

&lt;p&gt;A file operation, &lt;code&gt;poll()&lt;/code&gt;, is needed for the implementation of
select/poll/epoll.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// linux/fs.h
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file_operations&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ... omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table_struct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ... omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What does this operation do? In general, this operation is for
monitoring the &amp;ldquo;readiness&amp;rdquo; of the operations like &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt;
on this file.&lt;/p&gt;

&lt;p&gt;It is supposed to do two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Expose the queue(s) related to &amp;ldquo;readiness&amp;rdquo; inside this file: call
the callback wrapped inside &lt;code&gt;poll_table_struct&lt;/code&gt; with each queue&lt;/li&gt;
&lt;li&gt;Return a bitmask indicating current &amp;ldquo;readiness&amp;rdquo;, similar to the
&lt;code&gt;(struct epoll_event).events&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;poll-table-struct&#34;&gt;poll_table_struct&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at &lt;code&gt;poll_table_struct&lt;/code&gt; first. It is a function
pointer + a bitmask indicating the events we are interested in.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-2&#34;&gt;&lt;a href=&#34;#fn:fn-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * structures and helpers for f_op-&amp;gt;poll implementations
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poll_queue_proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table_struct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Do not touch the structure directly, use the access functions
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * poll_does_not_wait() and poll_requested_events() instead.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table_struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;poll_queue_proc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_qproc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__bitwise&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// types.h
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;implementing-the-poll-operation&#34;&gt;implementing the &lt;code&gt;poll&lt;/code&gt; operation&lt;/h4&gt;

&lt;p&gt;Each device need to implement this operation on their own, because its
logic depends on the device. But usually, it is quite simple.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for every related queue, call a function &lt;code&gt;poll_wait&lt;/code&gt; provided by
the kernel, passing the queue and the argument &lt;code&gt;poll_table_struct&lt;/code&gt;
to it.&lt;/li&gt;
&lt;li&gt;set the bitmask and return it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example from LDD3&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-3&#34;&gt;&lt;a href=&#34;#fn:fn-3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;: the implementation of &lt;code&gt;poll&lt;/code&gt; for a
device named &lt;code&gt;scullpipe&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;scull_p_poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scull_pipe&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;down&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// call poll_wait on every related queue
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;poll_wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;poll_wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;outq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// set the mask
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLLIN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLLRDNORM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacefree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLLOUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLLWRNORM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;up&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;poll_wait&lt;/code&gt; is a very simple function. It just call the callback in
&lt;code&gt;poll_table&lt;/code&gt; if feasible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;poll_wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_qproc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_qproc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;about-the-event-mask&#34;&gt;about the event mask&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;poll_table._key&lt;/code&gt; is the mask of the poll operation, similar to the
event mask in epoll.&lt;/p&gt;

&lt;p&gt;In the previous example &lt;code&gt;scull_p_poll&lt;/code&gt;, this mask is not used. Here is
an example how it is used.&lt;/p&gt;

&lt;p&gt;The poll operation for socket:&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-4&#34;&gt;&lt;a href=&#34;#fn:fn-4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sock_poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;busy_flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;         *      We can&amp;#39;t return errors to poll, so it&amp;#39;s either yes or no.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;         */&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk_can_busy_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;cm&#34;&gt;/* this socket can poll_ll so tell the system call */&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;busy_flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLL_BUSY_LOOP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

                &lt;span class=&#34;cm&#34;&gt;/* once, only if requested by syscall */&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLL_BUSY_LOOP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;sk_busy_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;busy_flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ops&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we use the &lt;code&gt;_key&lt;/code&gt; on the &lt;code&gt;poll_table&lt;/code&gt;, checking for
&lt;code&gt;POLL_BUSY_LOOP&lt;/code&gt;. If feasible, do a busy loop.&lt;/p&gt;

&lt;h5 id=&#34;old-note&#34;&gt;old note&lt;/h5&gt;

&lt;h5 id=&#34;another-example-of-poll-batadv-socket-poll&#34;&gt;another example of poll batadv_socket_poll&lt;/h5&gt;

&lt;h5 id=&#34;useful-example-socket-poll&#34;&gt;useful example: socket poll&lt;/h5&gt;

&lt;p&gt;net/socket.c&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-5&#34;&gt;&lt;a href=&#34;#fn:fn-5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sock_poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;busy_flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;         *      We can&amp;#39;t return errors to poll, so it&amp;#39;s either yes or no.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;         */&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk_can_busy_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;cm&#34;&gt;/* this socket can poll_ll so tell the system call */&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;busy_flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLL_BUSY_LOOP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

                &lt;span class=&#34;cm&#34;&gt;/* once, only if requested by syscall */&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLL_BUSY_LOOP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;sk_busy_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;busy_flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ops&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems to be the top level socket interface. Will dispatch to
&lt;code&gt;sock-&amp;gt;ops-&amp;gt;poll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here, we use the &lt;code&gt;_key&lt;/code&gt; on the &lt;code&gt;poll_table&lt;/code&gt;, for flag
&lt;code&gt;POLL_BUSY_LOOP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, the mask in &lt;code&gt;poll_table&lt;/code&gt; is used.&lt;/p&gt;

&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;poll&lt;/code&gt; operation of file is supposed to do two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;call the callback wrapped inside &lt;code&gt;poll_table&lt;/code&gt; with each related
queue&lt;/li&gt;
&lt;li&gt;return a bitmask indicating current readiness.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;list-and-queue-in-the-kernel&#34;&gt;list and queue in the Kernel&lt;/h3&gt;

&lt;p&gt;The idea of epoll is actually quite simple. Most of the complexity in
the code is to do it in a somehow object-oriented style, in the
efficient way of kernel.&lt;/p&gt;

&lt;p&gt;To understand it, you need to understand how pointer-based data
structure in the kernel work, e.g. linked list and red-black tree.&lt;/p&gt;

&lt;p&gt;For this is a post for epoll, I will use the code of epoll as
examples.&lt;/p&gt;

&lt;h4 id=&#34;embedded-anchor&#34;&gt;embedded anchor&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;struct epitem&lt;/code&gt; is one of the most important data structure in the
implementation of epoll, representing a file descriptor registered in
the epoll fd. It contains the &lt;code&gt;epoll_event&lt;/code&gt; that we pass in during
&lt;code&gt;epoll_ctl(EPOLL_CTL_ADD)&lt;/code&gt;, a &lt;code&gt;epoll_filefd&lt;/code&gt; containing the
pointer to corresponding &lt;code&gt;file&lt;/code&gt; struct, and some other data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_filefd&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ffd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// here I just want to show how the linked list in the kernel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// work. Many fields omitted.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;struct epollpoll&lt;/code&gt; is the data structure representing the epoll
instance.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;struct file&lt;/code&gt; represents an opened file.&lt;/p&gt;

&lt;p&gt;In current implementation, an &lt;code&gt;epitem&lt;/code&gt; may be add into several
containers, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eventpoll.rbr&lt;/code&gt;, a red-black tree of all registered &lt;code&gt;epitem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventpoll.rdllist&lt;/code&gt;, a list of &lt;code&gt;epitem&lt;/code&gt; of ready file descriptors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file.f_ep_links&lt;/code&gt;, a list of all the &lt;code&gt;epitem&lt;/code&gt; referencing this
&lt;code&gt;file&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beside, each &lt;code&gt;epitem&lt;/code&gt; also has a list on its own: a list of
&lt;code&gt;eppoll_entry&lt;/code&gt;.&lt;/p&gt;





&lt;figure&gt;
    
         
            
            
            &lt;img src=&#34;https://fd3kyt.github.io/ox-hugo/screenshot_2018-06-04_17-23-43.png&#34;
        
             alt=&#34;Figure 1: links on an epitem&#34;/&gt;
        
        
            &lt;figcaption&gt;
                
                &lt;p&gt;
                    Figure 1: links on an epitem
                    
                        
                        &lt;/p&gt;
                
            &lt;/figcaption&gt;
        
&lt;/figure&gt;


&lt;p&gt;In the world outside of the kernel, if we want to maintain a list of
ready &lt;code&gt;epitem&lt;/code&gt; on &lt;code&gt;eventpoll&lt;/code&gt;, we simply add a list on &lt;code&gt;eventpoll&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventpoll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ... omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rdllist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ... omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_new_epitem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventpoll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rdllist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the list, there must be nodes similar to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;my_node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;// doubly linked
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And when we add an element to the list, we create a new &lt;code&gt;my_node&lt;/code&gt;,
where &lt;code&gt;data&lt;/code&gt; is the new pointer to &lt;code&gt;epitem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But here, in the kernel, we do it differently:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// add a new member &amp;#34;rdllink&amp;#34; in epitem
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_filefd&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ffd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/* List header used to link this item to the &amp;#34;struct file&amp;#34; items list */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rdllink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;// need to add a list in struct eventpoll, of course
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventpoll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ... omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;rdllist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ... omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Definition of &lt;code&gt;list_head&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-6&#34;&gt;&lt;a href=&#34;#fn:fn-6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * The linkage struct for list nodes. This struct must be part of your
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * to-be-linked struct. struct list_head is required for both the head of the
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * list and for each list node.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Position and name of the struct list_head field is irrelevant.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * There are no requirements that elements of a list are of the same type.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * There are no requirements for a list head, any struct list_head can be a list
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * head.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;figure&gt;
    
         
            
            
            &lt;img src=&#34;https://fd3kyt.github.io/ox-hugo/screenshot_2018-06-04_17-59-00.png&#34;
        
             alt=&#34;Figure 2: two ways to link epitem into a list&#34;/&gt;
        
        
            &lt;figcaption&gt;
                
                &lt;p&gt;
                    Figure 2: two ways to link epitem into a list
                    
                        
                        &lt;/p&gt;
                
            &lt;/figcaption&gt;
        
&lt;/figure&gt;


&lt;p&gt;We don&amp;rsquo;t need any new memory when adding an &lt;code&gt;epitem&lt;/code&gt; into the list. We
just need to set &lt;code&gt;epitem.rdllink.next&lt;/code&gt; and &lt;code&gt;.prev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;rdllink&lt;/code&gt; can only link its &lt;code&gt;epitem&lt;/code&gt; into the &lt;code&gt;rdllist&lt;/code&gt; of one
&lt;code&gt;eventpoll&lt;/code&gt;. For example, if an &lt;code&gt;epitem&lt;/code&gt; may occur in the &lt;code&gt;rdllist&lt;/code&gt; of
multiple &lt;code&gt;eventpoll&lt;/code&gt;, one &lt;code&gt;rdllink&lt;/code&gt; per &lt;code&gt;epitem&lt;/code&gt; won&amp;rsquo;t do
it. Fortunately, here &lt;code&gt;epitem&lt;/code&gt; and &lt;code&gt;eventpoll&lt;/code&gt; have many-to-one
relationship.&lt;/p&gt;

&lt;h5 id=&#34;add-add_tail-delete-contains-all-in-O-1-&#34;&gt;add, add_tail, delete, contains, all in O(1)&lt;/h5&gt;

&lt;p&gt;Given the head of the list (&lt;code&gt;eventpoll.rdllist&lt;/code&gt;) and an &lt;code&gt;epitem&lt;/code&gt;, we
can do both &lt;code&gt;add&lt;/code&gt; (to the front) and &lt;code&gt;add_tail&lt;/code&gt; in O(1) easily,
because this is a doubly-linked circular list.&lt;/p&gt;

&lt;p&gt;We can also:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tell if the &lt;code&gt;epitem&lt;/code&gt; is in the ready list&lt;/li&gt;
&lt;li&gt;remove it from the ready list&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;both in O(1), and don&amp;rsquo;t even need the head of the ready list. Here is
a code snippet in &lt;code&gt;ep_remove&lt;/code&gt;, which is called during
&lt;code&gt;epoll_ctl(EPOLL_CTL_DEL)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventpoll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// if epi is in the ready list now, delete it from the list
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep_is_linked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rdllink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;list_del_init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rdllink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can do this because, &lt;code&gt;epitem&lt;/code&gt; belongs to one &lt;code&gt;eventpoll&lt;/code&gt;. This
&lt;code&gt;epitem&lt;/code&gt; is either linked by &lt;code&gt;rdllink&lt;/code&gt; into the &lt;code&gt;rdllist&lt;/code&gt; of this
&lt;code&gt;eventpoll&lt;/code&gt; or not.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the former case, the pointers in &lt;code&gt;epi-&amp;gt;rdllink&lt;/code&gt; pointers to
adjacent entries in the &lt;code&gt;rdllist&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we want to delete it, we just need to link the two adjacent
entries together and reset this entry.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the latter case, the pointers in &lt;code&gt;epi-&amp;gt;rdllink&lt;/code&gt; point to itself,
indicating that this &lt;code&gt;epitem&lt;/code&gt; is not in the &lt;code&gt;rdllist&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// this initializes a list_head
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;INIT_LIST_HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;list_empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_is_linked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list_empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;__list_del&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;list_del_init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;__list_del&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;INIT_LIST_HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;pros-and-cons-of-embedded-anchor&#34;&gt;pros and cons of embedded anchor&lt;/h5&gt;

&lt;p&gt;pros&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;don&amp;rsquo;t need to allocate/deallocate memory for the node when
inserting/deleting&lt;/li&gt;
&lt;li&gt;with a pointer to &lt;code&gt;epitem&lt;/code&gt;, we can

&lt;ul&gt;
&lt;li&gt;tell if it is currently linked inside a &lt;code&gt;rdllist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;remove it from &lt;code&gt;rdllist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;don&amp;rsquo;t need a list type for every type of element&lt;/li&gt;
&lt;li&gt;elements of a list can be of different types&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;cons&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;need to know which containers the strcut will be added into in
advance.

&lt;ol&gt;
&lt;li&gt;this is ok because

&lt;ol&gt;
&lt;li&gt;we (the programmers of the kernel) have control of the code
in whole kernel&lt;/li&gt;
&lt;li&gt;still possible to fall back to the usual way if necessary&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;similar to using &lt;code&gt;void*&lt;/code&gt; to pass different types of data,
programmers must keep in mind the actual type of underlying data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In summary, by making use of the knowledge of how the struct will be used,
we use this design pattern to improve performance and convenience, at
the cost of giving extra care at programming.&lt;/p&gt;

&lt;h4 id=&#34;embed-struct-to-store-more-data&#34;&gt;embedded original struct into another struct to pass more data&lt;/h4&gt;

&lt;p&gt;In addition to using embedded &lt;code&gt;list_head&lt;/code&gt; to implement linked list,
the kernel code also use the trick of embedded struct to pass more
data.&lt;/p&gt;

&lt;p&gt;To understand what I mean, let&amp;rsquo;s see an example in the epoll
implementation.&lt;/p&gt;

&lt;p&gt;Remind the section about the &lt;code&gt;poll()&lt;/code&gt; operation of a file.&lt;/p&gt;

&lt;p&gt;We call the &lt;code&gt;poll()&lt;/code&gt; operation of the file with &lt;code&gt;file*&lt;/code&gt; and
&lt;code&gt;poll_table*&lt;/code&gt;. Internally, for each queue related to operation
readiness in the file, we will call te callback wrapped inside
&lt;code&gt;poll_table&lt;/code&gt; with it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;poll_wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_qproc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_qproc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The callback is called with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;file*&lt;/code&gt; indicating the file&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;wait_queue_head_t&lt;/code&gt;, which is the queue&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poll_table*&lt;/code&gt;, which we pass to the poll operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if we need more data in this callback? More specifically, in the
implementation of epoll, this callback will be &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;,
and inside this function, we need to get the pointer to the
corresponding &lt;code&gt;epitem&lt;/code&gt;. How can we do this?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_ptable_queue_proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                 &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// need to get a pointer to the corresponding epitem of this file
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;file&lt;/code&gt; is a preexist kernel structure, indicating the opened
file. &lt;code&gt;whead&lt;/code&gt; is the queue provided by the device. &lt;code&gt;poll_table&lt;/code&gt; is the
argument of this &lt;code&gt;poll()&lt;/code&gt; call.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poll_queue_proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table_struct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table_struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;poll_queue_proc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_qproc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                      &lt;span class=&#34;c1&#34;&gt;// a bitmask indicating interested events
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we can see, there is no place in &lt;code&gt;poll_table_struct&lt;/code&gt; for extra
data.&lt;/p&gt;

&lt;p&gt;In a language that supports lambda function and closure, we may
consider to store the wanted &lt;code&gt;epitem*&lt;/code&gt; in a temporary lambda
function. Somehow similar to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_ptable_queue_proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# omitted&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call_poll_operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event_mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;temp_fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# save epitem in the closure&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ep_ptable_queue_proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp_fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event_mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But we can&amp;rsquo;t do this in C, especially not in the kernel.&lt;/p&gt;

&lt;p&gt;The solution is, wrap the &lt;code&gt;poll_table&lt;/code&gt; that we pass to the poll
operation in another struct, and store the needed info in this outer
struct.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* Wrapper struct used by poll queueing */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_pqueue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventpoll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                     &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full_check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// many code omited
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_pqueue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/* Initialize the poll table using the queue callback */&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;epq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;init_poll_funcptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_ptable_queue_proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// will call the poll operation of the file of this epitem with
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// epq.pt
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;revents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_item_poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// mainly call the poll operation of the file
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_item_poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// simplified
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_file_epoll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ffd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ffd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f_op&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ffd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;
                       &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;, we get the &lt;code&gt;epitem*&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;  &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_ptable_queue_proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                   &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_item_from_epqueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// code omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;cm&#34;&gt;/* Get the &amp;#34;struct epitem&amp;#34; from an epoll queue wrapper */&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ep_item_from_epqueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;container_of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_pqueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#ifndef container_of
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define container_of(ptr, type, member) \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;member&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How does it work?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a &lt;code&gt;poll_table&lt;/code&gt; is embedded into &lt;code&gt;ep_pqueue&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;and the callback wrapped in this &lt;code&gt;poll_table&lt;/code&gt; is
&lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;we pass a pointer to this embedded &lt;code&gt;poll_table&lt;/code&gt; to the &lt;code&gt;poll()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;internally, the callback will be called with queue(s) in the file
and the &lt;code&gt;poll_table*&lt;/code&gt; we passed in.&lt;/li&gt;
&lt;li&gt;Here, the callback is &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;inside &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;, we know that this &lt;code&gt;poll_table&lt;/code&gt; must
be wrapped inside a &lt;code&gt;ep_pqueue&lt;/code&gt; (because &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt; is
only used here, and here the &lt;code&gt;poll_table&lt;/code&gt; is wrapped inside a
&lt;code&gt;ep_pqueue&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;according to the memory layout of struct &lt;code&gt;ep_pqueue&lt;/code&gt; (which is
fixed at compilation time), we can get the starting address of this
&lt;code&gt;ep_pqueue&lt;/code&gt; from &lt;code&gt;poll_table*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;then, we just need to access the &lt;code&gt;epi&lt;/code&gt; field on this &lt;code&gt;ep_pqueue&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;wait-queue-in-the-kernel&#34;&gt;wait queue in the Kernel&lt;/h3&gt;

&lt;p&gt;In the implementation of epoll, wait queue is used a lot.&lt;/p&gt;

&lt;p&gt;Here I will do a brief introduction about the usage of wait queue in
the kernel.&lt;/p&gt;

&lt;p&gt;A wait queue is like a hook in elisp. When something interesting
occurs, you call every callback in the wait queue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_entry&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;			&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;wait_queue_func_t&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;spinlock_t&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key here is the &lt;code&gt;wait_queue_entry.func&lt;/code&gt;, which is the callback.&lt;/p&gt;

&lt;p&gt;When we want to activate this queue, we call &lt;code&gt;__wake_up_common&lt;/code&gt; on it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// greatly simplified
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__wake_up_common&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq_head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nr_exclusive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wake_flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;n&#34;&gt;wait_queue_entry_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bookmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wait_queue_entry_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// loop over the queue
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;list_for_each_entry_safe_from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// call the callback on this entry. notice that a pointer to
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// this entry is passed to this callback as the first argument
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wake_flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, we will have a callback that wake up the process at that
time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init_wait_entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_entry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq_entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wq_entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// set private to current task
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;wq_entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// autoremove_wake_function will wake up the task stored in
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// &amp;#34;private&amp;#34; and remove this entry from the queue
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;wq_entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;autoremove_wake_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;INIT_LIST_HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq_entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, epoll will use a customized callback, and doesn&amp;rsquo;t have to
wake up any task.&lt;/p&gt;

&lt;h2 id=&#34;implementation&#34;&gt;implementation&lt;/h2&gt;

&lt;h3 id=&#34;epoll-create&#34;&gt;epoll_create&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;alloc and initialize an &lt;code&gt;eventpoll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;alloc a fd&lt;/li&gt;
&lt;li&gt;alloc a &lt;code&gt;file&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;set its private data to a pointer to this &lt;code&gt;eventpoll&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;install this file with this fd into current process&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We use a fd to refer to the epoll instance. We want to do this
fast. fd -&amp;gt; &lt;code&gt;file&lt;/code&gt; -&amp;gt; &lt;code&gt;file.priv&lt;/code&gt; is fast.&lt;/p&gt;

&lt;h4 id=&#34;the-red-black-tree-in-eventpoll&#34;&gt;the red-black tree in &lt;code&gt;eventpoll&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;In the &lt;code&gt;eventpoll&lt;/code&gt;, there is a red-black tree containing all the
&lt;code&gt;epitem&lt;/code&gt; in this epoll instance.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;epitem.rbn&lt;/code&gt; is the embedded anchor for this RBT.&lt;/p&gt;

&lt;p&gt;The key for the RBT is &lt;code&gt;epitem.ffd&lt;/code&gt;, of type &lt;code&gt;epoll_filefd&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_filefd&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__packed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;


&lt;span class=&#34;cm&#34;&gt;/* Compare RB tree keys */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_cmp_ffd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_filefd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                             &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_filefd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since this is a red-black tree, we can find, insert, delete in
O(log(n)).&lt;/p&gt;

&lt;p&gt;This RBT is mainly used by &lt;code&gt;epoll_ctl&lt;/code&gt; and other management
functions. Getting the ready events and &lt;code&gt;epoll_wait&lt;/code&gt; use other data
structures instead of this RBT.&lt;/p&gt;

&lt;h3 id=&#34;main-data-structure&#34;&gt;&lt;span class=&#34;todo TODO_&#34;&gt;TODO &lt;/span&gt; main data structure&lt;/h3&gt;

&lt;h3 id=&#34;epoll-ctl--epoll-ctl-add&#34;&gt;epoll_ctl(EPOLL_CTL_ADD)&lt;/h3&gt;

&lt;p&gt;epoll_ctl(EPOLL_CTL_ADD):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;some simple check&lt;/li&gt;
&lt;li&gt;make sure that the key (&lt;code&gt;file*&lt;/code&gt;, &lt;code&gt;fd&lt;/code&gt;) doesn&amp;rsquo;t exist yet&lt;/li&gt;
&lt;li&gt;call &lt;code&gt;ep_insert()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;ep_insert&lt;/code&gt; do most of the job:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;construct a new &lt;code&gt;epitem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;call the file&amp;rsquo;s poll operation: register callback into the queue(s)
and get current events

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ep_item_poll&lt;/code&gt;, see below

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#poll-operation-of-file&#34;&gt;poll() operation of file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;add this &lt;code&gt;epitem&lt;/code&gt; to &lt;code&gt;file.f_ep_links&lt;/code&gt; of the file (record all the
&lt;code&gt;epitem&lt;/code&gt; of a &lt;code&gt;file&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;insert into the RBT&lt;/li&gt;
&lt;li&gt;if it is already ready, add it into &lt;code&gt;ep-&amp;gt;rdllist&lt;/code&gt; and wake up the
two wait queues on &lt;code&gt;ep&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;ep-item-poll&#34;&gt;&lt;code&gt;ep_item_poll&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;What we do here is actually quite simple: call the file&amp;rsquo;s &lt;code&gt;poll&lt;/code&gt;
operation, in order to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;call the callback provided by ourselves with each related queue in
the file&lt;/li&gt;
&lt;li&gt;get current events of this file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, the callback is &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;ep-ptable-queue-proc-dot&#34;&gt;&lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;.&lt;/h4&gt;

&lt;p&gt;So, what does this callback do?&lt;/p&gt;

&lt;p&gt;It add an entry into to wait queue.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;construct a new &lt;code&gt;eppoll_entry&lt;/code&gt; (see below)&lt;/li&gt;
&lt;li&gt;add it into the wait queue (anchor: wait)&lt;/li&gt;
&lt;li&gt;link it into &lt;code&gt;epitem.pwqlist&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;epitem-dot-pwqlist&#34;&gt;&lt;code&gt;epitem.pwqlist&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;This list contains all the wait queue entry &lt;code&gt;eppoll_entry&lt;/code&gt; of this
&lt;code&gt;epitem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may wonder that why do we need a list for this. A &lt;code&gt;epitem&lt;/code&gt; is for
only one file, and we only create new &lt;code&gt;eppoll_entry&lt;/code&gt; at insertion.&lt;/p&gt;

&lt;p&gt;However, the file may provides multiple queues in the &lt;code&gt;poll()&lt;/code&gt;
operation.&lt;/p&gt;

&lt;p&gt;For example, in the &lt;code&gt;scull_p_poll()&lt;/code&gt; example in &lt;a href=&#34;#implementing-the-poll-operation&#34;&gt;implementing the
&lt;code&gt;poll&lt;/code&gt; operation&lt;/a&gt;, the device provide 2 queues instead of one. In this
case, we will call the callback in &lt;code&gt;poll_table&lt;/code&gt;,
i.e. &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;, twice, and create 2 &lt;code&gt;eppoll_entry&lt;/code&gt;, one
for each queue. Both of them are added into &lt;code&gt;epitem.pwqlist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In summary, &lt;code&gt;epitem.pwqlist&lt;/code&gt; contains all the wait queue entries
&lt;code&gt;eppoll_entry&lt;/code&gt; for this &lt;code&gt;epitem&lt;/code&gt;. One for each queue provided by the
device in its &lt;code&gt;poll&lt;/code&gt; operation.&lt;/p&gt;

&lt;h4 id=&#34;eppoll-entry&#34;&gt;&lt;code&gt;eppoll_entry&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;So, after a long way, we are here. Most of the work before is for
adding the &lt;code&gt;eppoll_entry&lt;/code&gt; to the wait queue(s) of the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* Wait structure used by the poll hooks */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eppoll_entry&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/* List header used to link this structure to the &amp;#34;struct epitem&amp;#34; */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;llink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;cm&#34;&gt;/* The &amp;#34;base&amp;#34; pointer is set to the container &amp;#34;struct epitem&amp;#34; */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;         * Wait queue item that will be linked to the target file wait
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;         * queue head.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;         */&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;wait_queue_entry_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;cm&#34;&gt;/* The wait queue head that linked the &amp;#34;wait&amp;#34; wait queue item */&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;wait_queue_head_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s see in detail how &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt; do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_ptable_queue_proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_head_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                 &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_item_from_epqueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eppoll_entry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pwq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// omitted ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;init_waitqueue_func_entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pwq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_poll_callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pwq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pwq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLEXCLUSIVE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;add_wait_queue_exclusive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pwq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;add_wait_queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pwq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;list_add_tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pwq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;llink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pwqlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// omitted ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is quite straightforward. We just set the field on
&lt;code&gt;eppoll_entry&lt;/code&gt;, and add it into the queue and &lt;code&gt;epi-&amp;gt;pwqlist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will talk about &lt;code&gt;EPOLLEXCLUSIVE&lt;/code&gt; later.&lt;/p&gt;

&lt;p&gt;Here, just notice that there is a callback on the
&lt;code&gt;wait_queue_entry_t&lt;/code&gt;, i.e. &lt;code&gt;eppoll_entry.wait&lt;/code&gt; (the anchor for the
wait queue).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait_queue_entry&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;			&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;wait_queue_func_t&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_head&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;func&lt;/code&gt; here is set to be &lt;code&gt;ep_poll_callback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We want to attach more data to this &lt;code&gt;wait_queue_entry&lt;/code&gt; (mainly
&lt;code&gt;epitem*&lt;/code&gt;). It is possible to make use of &lt;code&gt;wait_queue_entry.private&lt;/code&gt;,
like the default behavior which store current task to this
field. However, we also want to link this entry into
&lt;code&gt;epitem.pwqlist&lt;/code&gt;. So, instead of using the &lt;code&gt;private&lt;/code&gt; field, here we
use the &amp;ldquo;&lt;a href=&#34;#embed-struct-to-store-more-data&#34;&gt;embedded original struct into another struct to pass more
data&lt;/a&gt;&amp;rdquo; trick here again&lt;/p&gt;

&lt;h4 id=&#34;summary-of-epoll-ctl-add&#34;&gt;summary of EPOLL_CTL_ADD&lt;/h4&gt;

&lt;p&gt;We are done with &lt;code&gt;epoll_ctl(EPOLL_CTL_ADD)&lt;/code&gt; now. We will see what the
callback registered in the queue(s), i.e. &lt;code&gt;ep_poll_callback&lt;/code&gt;, do
later. Here, let&amp;rsquo;s have a summary for EPOLL_CTL_ADD.&lt;/p&gt;

&lt;p&gt;Personally, I think that this is the most tricky part in the
implementation of epoll. However, this is not because of the
difficulty of the thing it do, but because of the design pattern which
is unusual outside of the kernel.&lt;/p&gt;

&lt;p&gt;So, after all, what have it done after a successful &lt;code&gt;EPOLL_CTL_ADD&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;(&lt;code&gt;ep&lt;/code&gt; shorts for &lt;code&gt;eventpoll&lt;/code&gt;)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;what&lt;/th&gt;
&lt;th&gt;extra&lt;/th&gt;
&lt;th&gt;where&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;check: key shuold not in the &lt;code&gt;ep.rbr&lt;/code&gt; now&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;epoll_ctl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;construct a new &lt;code&gt;epitem&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ep_insert&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;for each wait queue provided by &lt;code&gt;poll&lt;/code&gt; operation of this file&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;poll operation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&amp;gt; construct a new &lt;code&gt;eppoll_entry&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;callback: &lt;code&gt;ep_poll_callback&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ep_ptable_queue_proc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&amp;gt; &lt;strong&gt;link this &lt;code&gt;eppoll_entry&lt;/code&gt; into the queue&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ep_ptable_queue_proc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&amp;gt; link this &lt;code&gt;eppoll_entry&lt;/code&gt; into &lt;code&gt;epitem.pwqlist&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ep_ptable_queue_proc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;get current events of this file&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;poll operation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;add &lt;code&gt;epitem&lt;/code&gt; to &lt;code&gt;file.f_ep_links&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ep_insert&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;insert this &lt;code&gt;epitem&lt;/code&gt; into &lt;code&gt;ep.rbr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ep_insert&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;if already ready, add to &lt;code&gt;ep.rdllist&lt;/code&gt; and wait up queues on &lt;code&gt;ep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;discuss later&lt;/td&gt;
&lt;td&gt;ep_insert&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;related fun and struct:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;epitem&lt;/code&gt;: one of the core data structure, represent a fd in the
epoll set.

&lt;ul&gt;
&lt;li&gt;lifetime:

&lt;ul&gt;
&lt;li&gt;created and linked to the RBT on &lt;code&gt;eventpoll&lt;/code&gt; during insertion&lt;/li&gt;
&lt;li&gt;unlinked from the RBT and deleted when this fd is removed from
the epoll set&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ep_item_poll()&lt;/code&gt;: used by &lt;code&gt;ep_insert&lt;/code&gt;, call the &lt;code&gt;poll&lt;/code&gt; operation of
the file&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ep_insert()&lt;/code&gt;: do most of the job in &lt;code&gt;epoll_ctl(EPOLL_CTL_ADD)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ep_ptable_queue_proc()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;the callback for poll operation during insertion&lt;/li&gt;
&lt;li&gt;will construct a new &lt;code&gt;eppoll_entry&lt;/code&gt; and add it to the queue&lt;/li&gt;
&lt;li&gt;used only in insertion&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ep_pqueue&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;poll_table&lt;/code&gt; + &lt;code&gt;epitem*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;used to pass &lt;code&gt;epitem*&lt;/code&gt; to &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;used only in insertion&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eppoll_entry&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;the entry for this &lt;code&gt;epitem&lt;/code&gt; in the poll queue of the file&lt;/li&gt;
&lt;li&gt;lifetime:

&lt;ul&gt;
&lt;li&gt;created and added to the queue at &lt;code&gt;epoll_ctl(EPOLL_CTL_ADD)&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;removed only when this fd is removed from the epoll set

&lt;ul&gt;
&lt;li&gt;(&lt;code&gt;EPOLL_CTL_DEL&lt;/code&gt; or closing the whole epoll instance)&lt;/li&gt;
&lt;li&gt;(see where &lt;code&gt;ep_unregister_pollwait&lt;/code&gt; is called)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ep_poll_callback()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;the callback on the wait queue entry. Will be called when the
queue are activated.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the insertion, the main mission of &lt;code&gt;ep_insert()&lt;/code&gt;, &lt;code&gt;ep_pqueue&lt;/code&gt;,
&lt;code&gt;ep_ptable_queue_proc()&lt;/code&gt; is to access the queue(s) in the file and add
&lt;code&gt;eppoll_entry&lt;/code&gt; to each of them.&lt;/p&gt;

&lt;p&gt;After inserting the fd, what we need to do is to monitor the
&amp;ldquo;readiness&amp;rdquo; of the fd in the epoll set. Here, the callback
&lt;code&gt;ep_poll_callback&lt;/code&gt; on the wait queue entry and &lt;code&gt;epoll_wait&lt;/code&gt; will play
the main roles. We will talk about them next.&lt;/p&gt;

&lt;h3 id=&#34;a-few-words-about-the-event-mask&#34;&gt;a few words about the event mask&lt;/h3&gt;

&lt;p&gt;In the poll operation, there is an event mask in &lt;code&gt;poll_table&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table_struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;poll_queue_proc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_qproc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;// the event mask
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poll_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the &lt;code&gt;epoll_event&lt;/code&gt;, which is the argument of &lt;code&gt;epoll_ctl&lt;/code&gt; and stored
on &lt;code&gt;epitem&lt;/code&gt;, there is also an event mask.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// omitted ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;__poll_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;__u64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLL_PACKED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will use the mask in &lt;code&gt;epoll_event&lt;/code&gt; as the mask in poll operation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// in ep_item_poll
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// then use pt to call the poll operation of the file
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code&gt;ep_poll_callback&lt;/code&gt;, we will match the mask with the occured
event. If don&amp;rsquo;t match, discard this event.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ep_poll_callback
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// pollflags is the mask of the event
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pollflags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pollflags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can modify this mask (&lt;code&gt;epi-&amp;gt;event.events&lt;/code&gt;) with
&lt;code&gt;epoll_ctl(EPOLL_CTL_MOD)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;when-are-the-queues-activated&#34;&gt;when are the queues activated?&lt;/h3&gt;

&lt;p&gt;OK, now we have an &lt;code&gt;eppoll_entry&lt;/code&gt; with callback &lt;code&gt;ep_poll_callback&lt;/code&gt;
sitting in each of the files. When are the queue(s) activated?&lt;/p&gt;

&lt;h4 id=&#34;drilling-into-the-code&#34;&gt;drilling into the code&lt;/h4&gt;

&lt;p&gt;When is the queue(s) in the poll operation of the file activated?&lt;/p&gt;

&lt;p&gt;Take socket as an example: &lt;code&gt;linux/sock.c&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sk_data_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indicate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;there&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;processed&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sk_write_space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indicate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;there&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bf&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sending&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;space&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;sk-&amp;gt;sk_data_ready&lt;/code&gt; is called when data arrive. Its value is
&lt;code&gt;sock_def_readable&lt;/code&gt;. This function will activate the wait queue (where
the &lt;code&gt;eppoll_entry&lt;/code&gt; is added during &lt;code&gt;epoll_ctl(EPOLL_CTL_ADD)&lt;/code&gt;) on the
socket if feasible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sock_def_readable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket_wq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;rcu_read_lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;wq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rcu_dereference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk_wq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;skwq_has_sleeper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;wake_up_interruptible_sync_poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLIN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLPRI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
                                                &lt;span class=&#34;n&#34;&gt;EPOLLRDNORM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLRDBAND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sk_wake_async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOCK_WAKE_WAITD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLL_IN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;rcu_read_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It seems that this function is called every time data arrive at the
socket. Start from &lt;code&gt;dccp/ipv4.c&lt;/code&gt; &lt;code&gt;dccp_v4_rcv&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* this is called when real data arrives */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dccp_v4_rcv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sk_buff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;skb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And go all the way down to &lt;code&gt;sock_def_readable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, &lt;code&gt;sock_def_write_space&lt;/code&gt; is called when it is writable. It
wakes up the queue when available space is not less than half of the
buffer.  More accurately, I think that &lt;code&gt;sock_def_write_space&lt;/code&gt; is
called every time data is sent and some space get available. (not
verified)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sock_def_write_space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket_wq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;rcu_read_lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;cm&#34;&gt;/* Do not wake up a writer until he can make &amp;#34;significant&amp;#34;
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;         * progress.  --DaveM
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;         */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;refcount_read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk_wmem_alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk_sndbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;wq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rcu_dereference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk_wq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;skwq_has_sleeper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;wake_up_interruptible_sync_poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLOUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
                                                &lt;span class=&#34;n&#34;&gt;EPOLLWRNORM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLWRBAND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

                &lt;span class=&#34;cm&#34;&gt;/* Should agree with poll, otherwise some programs break */&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock_writeable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;sk_wake_async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOCK_WAKE_SPACE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POLL_OUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;rcu_read_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;why-does-it-matter&#34;&gt;why does it matter?&lt;/h4&gt;

&lt;p&gt;From the code, it seems that, in socket, the queue which
&lt;code&gt;eppoll_entry&lt;/code&gt; is in is activated when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;every time data arrive and&lt;/li&gt;
&lt;li&gt;every time data is sent and it is writable now (a reasonable amount
of space is available in the write buffer).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see that this behavior is quite similar to the epoll
edge-triggered mode.&lt;/p&gt;

&lt;p&gt;Actually, from the code, we will see that registering a callback
(&lt;code&gt;ep_poll_callback&lt;/code&gt;) to the queue of the fd leads to a edge-triggered
behavior naturally. On top of this, we support a level-triggered
behavior with some extra code (It is quite simple. Discussed later.)&lt;/p&gt;

&lt;p&gt;Knowing this, we can get better understanding of the behavior of the
edge-triggered mode.&lt;/p&gt;

&lt;p&gt;When a big chunk of data arrive, the queue is activated once. If we
read only a part of it and leave some unread in the socket read
buffer, we won&amp;rsquo;t get another notification until the arrival of new
data.&lt;/p&gt;

&lt;p&gt;Here is an example (one socket, ET)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;100B data arrive

&lt;ol&gt;
&lt;li&gt;queue activated, &lt;code&gt;ep_poll_callback&lt;/code&gt; is called&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_wait&lt;/code&gt;, get the event&lt;/li&gt;
&lt;li&gt;read 50B&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_wait&lt;/code&gt;, get nothing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, if data arrive multiple times, we can get multiple events
with multiple &lt;code&gt;epoll_wait&lt;/code&gt;, even if we never read from it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;10B data arrive

&lt;ol&gt;
&lt;li&gt;queue activated, &lt;code&gt;ep_poll_callback&lt;/code&gt; is called&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_wait&lt;/code&gt;, get the event&lt;/li&gt;
&lt;li&gt;10B data arrive

&lt;ol&gt;
&lt;li&gt;ditto&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_wait&lt;/code&gt;, get the event&lt;/li&gt;
&lt;li&gt;10B data arrive

&lt;ol&gt;
&lt;li&gt;ditto&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_wait&lt;/code&gt;, get the event&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hence the words in the manual of &lt;code&gt;epoll&lt;/code&gt;:&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-7&#34;&gt;&lt;a href=&#34;#fn:fn-7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since even with edge-triggered epoll, multiple events can be generated
upon receipt of multiple chunks of data, the caller has the option to
specify the EPOLLONESHOT flag, &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;collecting-ready-events&#34;&gt;collecting ready events&lt;/h3&gt;

&lt;p&gt;Remind that, the purpose of &lt;code&gt;epoll&lt;/code&gt; is to get the fd in the epoll set
that are ready for read and/or write. We get the &lt;code&gt;epoll_event&lt;/code&gt;
describing ready fd in an array provided by ourselves, by calling
&lt;code&gt;epoll_wait()&lt;/code&gt;. So, the problem here is, how are these events
collected?&lt;/p&gt;

&lt;p&gt;In brief:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;there is a list of ready &lt;code&gt;epitem&lt;/code&gt; on &lt;code&gt;eventpoll&lt;/code&gt;, the data
structure representing the epoll instance.&lt;/li&gt;
&lt;li&gt;when data arrive/is sent, the queue of the fd is activated, and
&lt;code&gt;ep_poll_callback&lt;/code&gt; is called

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ep_poll_callback&lt;/code&gt; will put the corresponding &lt;code&gt;epitem&lt;/code&gt; into the
ready list of &lt;code&gt;eventpoll&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;when &lt;code&gt;epoll_wait&lt;/code&gt; is called, we simply take current ready list,
iterate over it and write to the output array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some problems remain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what if the ready list is empty when we call &lt;code&gt;epoll_wait&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;what if new events come (&lt;code&gt;ep_poll_callback&lt;/code&gt; is called) when we are
transferring data in &lt;code&gt;epoll_wait&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ep-poll-callback&#34;&gt;ep_poll_callback&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s see &lt;code&gt;ep_poll_callback&lt;/code&gt; in detail.&lt;/p&gt;

&lt;h4 id=&#34;arguments-of-ep-poll-callback&#34;&gt;arguments of &lt;code&gt;ep_poll_callback&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Signature of &lt;code&gt;ep_poll_callback&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_poll_callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait_queue_entry_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Meaning of arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt; and &lt;code&gt;sync&lt;/code&gt; are not used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait&lt;/code&gt; points to the wait queue entry that causes this callback to
be called.

&lt;ul&gt;
&lt;li&gt;here, it points to a &lt;code&gt;wait_queue_entry_t&lt;/code&gt; embedded in an
&lt;code&gt;eppoll_entry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; is the mask indicating the event occured.

&lt;ul&gt;
&lt;li&gt;e.g. in &lt;code&gt;sock_def_readable&lt;/code&gt;, when we wake up the queue, &lt;code&gt;key&lt;/code&gt; is
set to be &lt;code&gt;EPOLLIN | EPOLLPRI | EPOLLRDNORM | EPOLLRDBAND&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ep-poll-callback-step-by-step&#34;&gt;&lt;code&gt;ep_poll_callback&lt;/code&gt;,step by step&lt;/h4&gt;

&lt;p&gt;Below is what &lt;code&gt;ep_poll_callback&lt;/code&gt; do, step by step. Before that, I want
to mention that there is actually two ready list on an &lt;code&gt;eventpoll&lt;/code&gt;
instance: &lt;code&gt;rdllist&lt;/code&gt; and &lt;code&gt;ovflist&lt;/code&gt;. Most of the time,
&lt;code&gt;ep_poll_callback&lt;/code&gt; add ready &lt;code&gt;epitem&lt;/code&gt; to &lt;code&gt;rdllist&lt;/code&gt;. However, when
there is a task calling &lt;code&gt;epoll_wait&lt;/code&gt; and transfering current ready
list to userspace, new ready &lt;code&gt;epitem&lt;/code&gt; are linked into &lt;code&gt;ovflist&lt;/code&gt;. (More
detail later)&lt;/p&gt;

&lt;p&gt;(You may want to have the code in hand:
&lt;a href=&#34;https://github.com/torvalds/linux/blob/v4.16/fs/eventpoll.c#L1117&#34;&gt;https://github.com/torvalds/linux/blob/v4.16/fs/eventpoll.c#L1117&lt;/a&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;get &lt;code&gt;epitem*&lt;/code&gt; from &lt;code&gt;wait&lt;/code&gt;, the wait queue entry

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#embed-struct-to-store-more-data&#34;&gt;embedded original struct into another struct to pass more data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;get &lt;code&gt;eventpoll*&lt;/code&gt; from &lt;code&gt;epitem&lt;/code&gt; (&lt;code&gt;epitem.ep&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;lock &lt;code&gt;eventpoll&lt;/code&gt; (&lt;code&gt;ep-&amp;gt;lock&lt;/code&gt;)(will discuss locking and multithread
in detail later)&lt;/li&gt;
&lt;li&gt;Check if there are events that we are interested in. If not, clean
up and done (&lt;code&gt;goto out_unlock&lt;/code&gt;).

&lt;ol&gt;
&lt;li&gt;interested events is stored in &lt;code&gt;epi-&amp;gt;event.events&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;occured events is in &lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;if is transferring events to userspace now, add &lt;code&gt;epitem&lt;/code&gt; into the
&lt;code&gt;ep.ovflist&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;in this case, don&amp;rsquo;t wake up &lt;code&gt;wq&lt;/code&gt; and &lt;code&gt;poll_wait&lt;/code&gt; because there
is already a process calling &lt;code&gt;epoll_wait&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;link &lt;code&gt;epitem&lt;/code&gt; into &lt;code&gt;ep.rdllist&lt;/code&gt; unless already linked

&lt;ul&gt;
&lt;li&gt;If multiple events occur on one fd before calling &lt;code&gt;epoll_wait&lt;/code&gt;,
we can see here that after the first occurrence, the &lt;code&gt;epitem&lt;/code&gt; is
linked inside &lt;code&gt;rdllist&lt;/code&gt;. Following call of &lt;code&gt;ep_poll_callback&lt;/code&gt;
just skip this step.

&lt;ul&gt;
&lt;li&gt;In effect, multiple events on one fd before any &lt;code&gt;epoll_wait&lt;/code&gt;
are &amp;ldquo;merged&amp;rdquo; into one.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;we can tell if it is in the list in O(1) (see &lt;a href=&#34;#add-add_tail-delete-contains-all-in-O-1-&#34;&gt;add, add_tail,
delete, contains, all in O(1)&lt;/a&gt;)

&lt;ol&gt;
&lt;li&gt;use &lt;code&gt;epitem.rdllink&lt;/code&gt; to link it into the ready list&lt;/li&gt;
&lt;li&gt;one &lt;code&gt;epitem&lt;/code&gt; is only used by one epoll instance&lt;/li&gt;
&lt;li&gt;only need to check &lt;code&gt;epitem.rdllink&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;activate wait queues in the epoll instance: &lt;code&gt;wq&lt;/code&gt; and &lt;code&gt;poll_wait&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;wq&lt;/code&gt;: processes calling &lt;code&gt;epoll_wait()&lt;/code&gt; and blocked&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poll_wait&lt;/code&gt;: queue for the &lt;code&gt;pull()&lt;/code&gt; operation of the epoll fd
itself

&lt;ol&gt;
&lt;li&gt;epoll can be used in a nested manner, i.e. adding an epfd
into another epoll. This need special treatment in the epoll
implementation to avoid problems, for example, closed
loops. Not discussed here.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;out_unlock

&lt;ol&gt;
&lt;li&gt;unlock &lt;code&gt;eventpoll&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(Other) things that I have omitted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RCU&lt;/code&gt;, &lt;code&gt;wakeup_source&lt;/code&gt;: don&amp;rsquo;t know yet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EPOLLEXCLUSIVE&lt;/code&gt;: new feature in Linux 4.5. Will be discussed
separately.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;summary-of-ep-poll-callback&#34;&gt;summary of &lt;code&gt;ep_poll_callback&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;What does it do?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;check the mask of occured event. if nothing interested, do nothing.&lt;/li&gt;
&lt;li&gt;add the corresponding &lt;code&gt;epitem&lt;/code&gt; into the ready list of the epoll
instance. (&lt;code&gt;rdllist&lt;/code&gt; or &lt;code&gt;ovflist&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;activate the queues on the epoll instance

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wq&lt;/code&gt;: processes that are blocked in &lt;code&gt;epoll_wait&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poll_wait&lt;/code&gt;: queue for the &lt;code&gt;poll&lt;/code&gt; operation of &lt;code&gt;epoll&lt;/code&gt; itself&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;epoll-wait&#34;&gt;epoll_wait&lt;/h3&gt;

&lt;p&gt;As mention before, what &lt;code&gt;epoll_wait&lt;/code&gt; do is mainly making use of the
current ready list on &lt;code&gt;eventpoll&lt;/code&gt;, and write data to the user-provided
array.&lt;/p&gt;

&lt;p&gt;This sounds simple, but there are some interesting things to take care
of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;epoll_wait&lt;/code&gt; may block if there is no &lt;code&gt;epitem&lt;/code&gt; in the ready list
now.

&lt;ul&gt;
&lt;li&gt;and there may be multiple processes blocking on one epfd.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;need to handle the two ready lists correctly&lt;/li&gt;
&lt;li&gt;different behaviors for some different flags in epoll, like ET/LT and
EPOLLONESHOT are mainly implemented here.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;main-functions-used-in-epoll-wait&#34;&gt;main functions used in &lt;code&gt;epoll_wait&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;epoll_wait&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the entry point. do some simple check and call &lt;code&gt;ep_poll&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ep_poll&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;do the &amp;ldquo;polling&amp;rdquo;, aka. the loop checking, until the ready list is
not empty (if not nonblocking). If empty now, sleep until waked up
by &lt;code&gt;ep_poll_callback&lt;/code&gt;, signal or timeout.&lt;/li&gt;
&lt;li&gt;when the ready list is not empty, call &lt;code&gt;ep_send_events&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ep_send_events&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simply call &lt;code&gt;ep_scan_ready_list&lt;/code&gt; with &lt;code&gt;ep_send_events_proc&lt;/code&gt; as
callback.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ep_scan_ready_list&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mainly handle the &amp;ldquo;main ready list and temp ready list&amp;rdquo; thing, and
call the passed-in callback (here is &lt;code&gt;ep_send_events_proc&lt;/code&gt;) to do
the real job.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ep_send_events_proc&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;loop over the ready list and do the copy to user array&lt;/li&gt;
&lt;li&gt;when working on each &lt;code&gt;epitem&lt;/code&gt;, will call the &lt;code&gt;poll&lt;/code&gt; operation of
the file to check its current readiness. If there is currently no
interested events on this file, will simply drop it without
reporting to &lt;code&gt;epoll_wait&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;handle &lt;code&gt;ET/LT&lt;/code&gt; and &lt;code&gt;EPOLLONESHOT&lt;/code&gt; here&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(I think that it is totally ok to write &lt;code&gt;ep_scan_ready_list&lt;/code&gt; and
&lt;code&gt;ep_send_events_proc&lt;/code&gt; in one function. Here we split them and pass
one to another as callback, mainly for reuse and code tidiness.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ep-poll&#34;&gt;&lt;code&gt;ep_poll&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;(Again, you may want the code in hand:
&lt;a href=&#34;https://github.com/torvalds/linux/blob/v4.16/fs/eventpoll.c#L1739&#34;&gt;https://github.com/torvalds/linux/blob/v4.16/fs/eventpoll.c#L1739&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ep_poll&lt;/code&gt; has the same arguments as &lt;code&gt;epoll_wait&lt;/code&gt;, except that the
&lt;code&gt;epfd&lt;/code&gt; in &lt;code&gt;epoll_wait&lt;/code&gt; is replaced with &lt;code&gt;eventpoll*&lt;/code&gt; here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;epoll_wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxevents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventpoll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxevents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can get the &lt;code&gt;eventpoll*&lt;/code&gt; from &lt;code&gt;epfd&lt;/code&gt; like this: (done in the
&lt;code&gt;epoll_wait&lt;/code&gt; function)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;n&#34;&gt;eventpoll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fdget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are two parts in &lt;code&gt;ep_poll&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fetch_events&lt;/li&gt;
&lt;li&gt;check_events&lt;/li&gt;
&lt;/ul&gt;





&lt;figure&gt;
    
         
            
            
            &lt;img src=&#34;https://fd3kyt.github.io/ox-hugo/ep_poll_flow_chart.png&#34;
        
             alt=&#34;/ox-hugo/ep_poll_flow_chart.png&#34;/&gt;
        
        
&lt;/figure&gt;


&lt;p&gt;&lt;code&gt;ep_events_available&lt;/code&gt; is a very simple function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * ep_events_available - Checks if ready events might be available.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @ep: Pointer to the eventpoll context.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Returns: Returns a value different than zero if ready events are available,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *          or zero otherwise.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ep_events_available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventpoll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list_empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rdllist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ovflist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EP_UNACTIVE_PTR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some extra notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ep_busy_loop&lt;/code&gt; in the code is for busy polling, a new feature added
in v4.12. As I see it, it doesn&amp;rsquo;t poll the file. Instead, it polls
the network device. This won&amp;rsquo;t affect the semantic of ET because the
data in the device are considered &amp;ldquo;not arrived&amp;rdquo; yet. (Maybe more in
another post.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;see this commit: &lt;a href=&#34;https://github.com/torvalds/linux/commit/bf3b9f6372c45b0fbf24d86b8794910d20170017&#34;&gt;https://github.com/torvalds/linux/commit/bf3b9f6372c45b0fbf24d86b8794910d20170017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;epoll_wait&lt;/code&gt; add current process to &lt;code&gt;ep-&amp;gt;wq&lt;/code&gt;, which is waked up in
&lt;code&gt;ep_poll_callback&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This wait queue entry is marked as &amp;ldquo;exclusive&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a queue is activated, the callbacks of &lt;strong&gt;all non-exclusive&lt;/strong&gt;
entries and the callback of &lt;strong&gt;one exclusive&lt;/strong&gt; entry, if there is
one, are called.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Suppose that there are multiple processes blocking on one epoll
instance in &lt;code&gt;epoll_wait&lt;/code&gt; (the ready list should be empty now).
When a &lt;code&gt;epitem&lt;/code&gt; get into the ready list, only one of the
&lt;code&gt;epoll_wait&lt;/code&gt; should be waked up (thus the exclusive flag here). It
will take the ready list and copy to the user&amp;rsquo;s array (discuss
below). After this, it will wake up &lt;code&gt;ep-&amp;gt;wq&lt;/code&gt; again if there are
still available &lt;code&gt;epitem&lt;/code&gt; in the ready list.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the lock hold here is &lt;code&gt;ep-&amp;gt;lock&lt;/code&gt;, and it is unlocked when&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sleeping&lt;/li&gt;
&lt;li&gt;calling &lt;code&gt;ep_send_events&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;according to the comment, the time that we set task state to
&lt;code&gt;TASK_INTERRUPTIBLE&lt;/code&gt; is important. But I don&amp;rsquo;t quite understand it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;summary-of-ep-poll&#34;&gt;summary of &lt;code&gt;ep_poll&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Well, I think that this is a typical kernel function that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;check specific condition&lt;/li&gt;
&lt;li&gt;if not met, sleep until waked up or timed out&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wanted condition is that the ready list is not empty&lt;/li&gt;
&lt;li&gt;add itself to &lt;code&gt;ep-&amp;gt;wq&lt;/code&gt; and expect to be waked up by
&lt;code&gt;ep_poll_callback&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;timeout is an argument of &lt;code&gt;epoll_wait&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;when we find that the ready list is not empty, call
&lt;code&gt;ep_send_events()&lt;/code&gt;. If no event is actually sent, we go back to the
waiting loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This function (blocking) returns when one of these conditions happen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a signal is caught&lt;/li&gt;
&lt;li&gt;time out&lt;/li&gt;
&lt;li&gt;at least 1 events is sent to the userspace.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ep-scan-ready-list&#34;&gt;&lt;code&gt;ep_scan_ready_list&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;ep_poll&lt;/code&gt; call &lt;code&gt;ep_send_events&lt;/code&gt; when there are &lt;code&gt;epitem&lt;/code&gt; in the ready
list. &lt;code&gt;ep_send_events&lt;/code&gt; simply call &lt;code&gt;ep_scan_ready_list&lt;/code&gt; with
&lt;code&gt;ep_send_events_proc&lt;/code&gt; as callback.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ep_scan_ready_list&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;initialize a new list &lt;code&gt;txlist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;lock &lt;code&gt;ep-&amp;gt;mtx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;lock &lt;code&gt;ep-&amp;gt;lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;move current content of &lt;code&gt;rdllink&lt;/code&gt; into &lt;code&gt;txlist&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rdllink&lt;/code&gt; reinitialized to empty list&lt;/li&gt;
&lt;li&gt;these &lt;code&gt;epitem&lt;/code&gt; are still linked together with &lt;code&gt;rdllink&lt;/code&gt;. Just
change the head of linked list from &lt;code&gt;ep-&amp;gt;rdllist&lt;/code&gt; to a temporary
&lt;code&gt;txlist&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;change &lt;code&gt;ep-&amp;gt;ovflist&lt;/code&gt; from &lt;code&gt;EP_UNACTIVE_PTR&lt;/code&gt; to NULL

&lt;ol&gt;
&lt;li&gt;so, &lt;code&gt;ep_poll_callback&lt;/code&gt; will add new &lt;code&gt;epitem&lt;/code&gt; into &lt;code&gt;ovflist&lt;/code&gt;
directly without touching &lt;code&gt;rdllist&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;with &lt;code&gt;ep-&amp;gt;lock&lt;/code&gt; temporarily unlocked:

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;call the callback, here it is &lt;code&gt;ep_send_events_proc&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;move all epitems on &lt;code&gt;ovflist&lt;/code&gt; to &lt;code&gt;rdllink&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;if not already linked&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;set &lt;code&gt;ep-&amp;gt;ovflist&lt;/code&gt; back to &lt;code&gt;EP_UNACTIVE_PTR&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;so further &lt;code&gt;ep_poll_callback&lt;/code&gt; will add &lt;code&gt;epitem&lt;/code&gt; to &lt;code&gt;rdllist&lt;/code&gt;,
just like usual.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;concat &lt;code&gt;txlist&lt;/code&gt; (remaining &lt;code&gt;epitems&lt;/code&gt; not uesd by the callback) back
to &lt;code&gt;rdllist&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;in &lt;code&gt;ep_send_events_proc&lt;/code&gt;, this only happens when an error occurs
when writing data to the array provided by the user&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;if the &lt;code&gt;rdllist&lt;/code&gt; is not empty now

&lt;ul&gt;
&lt;li&gt;activate the two queues

&lt;ol&gt;
&lt;li&gt;activate &lt;code&gt;ep-&amp;gt;wq&lt;/code&gt; (with &lt;code&gt;ep-&amp;gt;mtx&lt;/code&gt; and &lt;code&gt;ep-&amp;gt;lock&lt;/code&gt; locked)&lt;/li&gt;
&lt;li&gt;activate &lt;code&gt;ep-&amp;gt;poll_wait&lt;/code&gt; (with &lt;code&gt;ep-&amp;gt;mtx&lt;/code&gt; and &lt;code&gt;ep-&amp;gt;lock&lt;/code&gt;
unlocked)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;remind that in &lt;code&gt;ep_poll_callback&lt;/code&gt;, we add current process to
&lt;code&gt;ep-&amp;gt;wq&lt;/code&gt; with the exclusive flag, so only one &lt;code&gt;epoll_wait&lt;/code&gt; is
waked up when new event occurs. Here, after current process have
done with the ready list, we activate &lt;code&gt;ep-&amp;gt;wq&lt;/code&gt; again so that
another blocked &lt;code&gt;epoll_wait&lt;/code&gt;, if there is one, will be waked up
if the ready list is not empty now.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;unlock &lt;code&gt;ep-&amp;gt;lock&lt;/code&gt; and &lt;code&gt;ep-&amp;gt;mtx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;behavior-of-ovflist&#34;&gt;behavior of &lt;code&gt;ovflist&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;In &lt;code&gt;ep_poll_callback&lt;/code&gt;, we add to &lt;code&gt;ovflist&lt;/code&gt; directly without checking
&lt;code&gt;rdllink&lt;/code&gt; if &lt;code&gt;ovflist&lt;/code&gt; is active.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * If we are transferring events to userspace, we can hold no locks
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * (because we&amp;#39;re accessing user memory, and because of linux f_op-&amp;gt;poll()
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * semantics). All the events that happen during that period of time are
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * chained in ep-&amp;gt;ovflist and requeued later on.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unlikely&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ovflist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EP_UNACTIVE_PTR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EP_UNACTIVE_PTR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ovflist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ovflist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ws&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;                         * Activate ep-&amp;gt;ws since epi-&amp;gt;ws may get
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;                         * deactivated at any time.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;                         */&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;__pm_stay_awake&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ws&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/* If this file is already in the ready list we exit soon */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep_is_linked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rdllink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;list_add_tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rdllink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rdllist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ep_pm_stay_awake_rcu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Suppose an &lt;code&gt;epitem&lt;/code&gt;, E, is currently in the ready list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_wait&lt;/code&gt;, in &lt;code&gt;ep_scan_ready_list&lt;/code&gt;, current ready list is
spliced to &lt;code&gt;txlist&lt;/code&gt;.

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;E.rdllink&lt;/code&gt; is linked, but now in the &lt;code&gt;txlist&lt;/code&gt;, not the
&lt;code&gt;rdllist&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;at this time, events occur again on &lt;code&gt;epitem&lt;/code&gt; E. &lt;code&gt;ep_poll_callback&lt;/code&gt;
is called.

&lt;ol&gt;
&lt;li&gt;if we check &lt;code&gt;rdllink&lt;/code&gt; here, we may think that it is already in
the ready list and do nothing. In effect, if there comes new
event on a currently transfering &lt;code&gt;epitem&lt;/code&gt;, it is ignored.&lt;/li&gt;
&lt;li&gt;However, this is not what we want. We want to preserve events
occur during &lt;code&gt;epoll_wait&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;So, instead, we add this &lt;code&gt;epitem&lt;/code&gt; to &lt;code&gt;ovflist&lt;/code&gt; temporarily and
add it back to &lt;code&gt;rdllist&lt;/code&gt; when the copying is done.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--listend--&gt;

&lt;ol&gt;
&lt;li&gt;if an &lt;code&gt;epitem&lt;/code&gt; is currently in the &lt;code&gt;txlist&lt;/code&gt; in &lt;code&gt;ep_scan_ready_list&lt;/code&gt;
(linked with &lt;code&gt;rdllink&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;new event come and &lt;code&gt;ep_poll_callback&lt;/code&gt; is called.

&lt;ol&gt;
&lt;li&gt;should add this &lt;code&gt;epitem&lt;/code&gt; to the ready list

&lt;ol&gt;
&lt;li&gt;don&amp;rsquo;t want to &amp;ldquo;merge&amp;rdquo; the new event and the event that is
currently transferring to the userspace in &lt;code&gt;epoll_wait&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;can&amp;rsquo;t link it into &lt;code&gt;rdllist&lt;/code&gt;, because we need &lt;code&gt;rdllink&lt;/code&gt; for this,
and it is already used&lt;/li&gt;
&lt;li&gt;solution: add to &lt;code&gt;ovflist&lt;/code&gt; instead&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;summary-of-ep-scan-ready-list&#34;&gt;summary of &lt;code&gt;ep_scan_ready_list&lt;/code&gt;&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;call the callback (will be &lt;code&gt;ep_send_events_proc&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ep-&amp;gt;mtx&lt;/code&gt; locked and &lt;code&gt;ep-&amp;gt;lock&lt;/code&gt; not locked (discuss later)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;three lists here: &lt;code&gt;rdllist&lt;/code&gt;, &lt;code&gt;ovflist&lt;/code&gt;, &lt;code&gt;txlist&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ovflist&lt;/code&gt; is a simple singly linked list, linked with
&lt;code&gt;epitem.next&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;new &lt;code&gt;epitem&lt;/code&gt; go to &lt;code&gt;ovflist&lt;/code&gt; during the execution of the callback&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdllist&lt;/code&gt; and &lt;code&gt;txlist&lt;/code&gt; both use &lt;code&gt;epitem.rdllink&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;in this case, you can&amp;rsquo;t tell if a &lt;code&gt;epitem&lt;/code&gt; is linked inside
&lt;code&gt;rdllist&lt;/code&gt; or &lt;code&gt;txlist&lt;/code&gt; by checking &lt;code&gt;epitem.rdllink&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ep-send-events-proc&#34;&gt;&lt;code&gt;ep_send_events_proc&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;ep_send_events_proc&lt;/code&gt; works on &lt;code&gt;txlist&lt;/code&gt;, the ready list taken from
&lt;code&gt;rdllist&lt;/code&gt;. It does the copy to the userspace and handles flags like
&lt;code&gt;EPOLLONESHOT&lt;/code&gt; and &lt;code&gt;ET/LT&lt;/code&gt;. Note that the &lt;code&gt;poll&lt;/code&gt; operation of each fd
is called here (again) to verify that the fd do have some events that
we are interested in at this time.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for each &lt;code&gt;epitem&lt;/code&gt; on &lt;code&gt;txlist&lt;/code&gt; (stop when number of sent events
reach &lt;code&gt;maxevents&lt;/code&gt;, the argument of &lt;code&gt;epoll_wait&lt;/code&gt;.)

&lt;ol&gt;
&lt;li&gt;wake up &lt;code&gt;ep-&amp;gt;ws&lt;/code&gt; ???&lt;/li&gt;
&lt;li&gt;remove it from the list (linked with &lt;code&gt;epitem.rdllink&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;call the &lt;code&gt;poll&lt;/code&gt; operation of the file (again) to get its current
event mask

&lt;ol&gt;
&lt;li&gt;the callback on &lt;code&gt;poll_table&lt;/code&gt; is none

&lt;ol&gt;
&lt;li&gt;remind that in &lt;code&gt;epoll_ctl(EPOLL_CTL_ADD)&lt;/code&gt;, we use the
file&amp;rsquo;s &lt;code&gt;poll&lt;/code&gt; operation to get its current mask and
register &lt;code&gt;eppoll_entry&lt;/code&gt; to its queue(s). At that time, the
callback is &lt;code&gt;ep_ptable_queue_proc&lt;/code&gt;. Here, we don&amp;rsquo;t need to
do anything with the queue, thus the null callback.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;if no monitored event now, discard this one&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;__put_user&lt;/code&gt; to write to the &lt;code&gt;epoll_event&lt;/code&gt; in the provided
array in userspace.

&lt;ol&gt;
&lt;li&gt;if error occur, add this &lt;code&gt;epitem&lt;/code&gt; back to &lt;code&gt;txlist&lt;/code&gt; and set
the return value to indicate error.&lt;/li&gt;
&lt;li&gt;otherwise: number of sent events +1 (&lt;code&gt;esed-&amp;gt;res++&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;EPOLLONESHOT&lt;/code&gt;, deactivate this &lt;code&gt;epitem&lt;/code&gt; by setting its event
mask.&lt;/li&gt;
&lt;li&gt;otherwise, if &lt;code&gt;EPOLLLT&lt;/code&gt;, add this &lt;code&gt;epitem&lt;/code&gt; back to &lt;code&gt;rdllist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;return value is the number of events written to userspace, or a
negative number indicating error.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;lt-over-et&#34;&gt;LT over ET&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;ET&lt;/code&gt; is the &amp;ldquo;natural&amp;rdquo; behavior of epoll, because of the usage of wait
queues of the files and the timing that &lt;code&gt;ep_poll_callback&lt;/code&gt; is
called. We are notified every time a chunk of data
arrive&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-8&#34;&gt;&lt;a href=&#34;#fn:fn-8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;. However, after the arrival, we can&amp;rsquo;t get notification
for the data unread and lying in the read buffer.&lt;/p&gt;

&lt;p&gt;If we want to know if there is currently data readable in the fd,
instead of only getting notified when data arrive, what should we do?&lt;/p&gt;

&lt;p&gt;A naive solution is to keep a list of &lt;code&gt;epitem&lt;/code&gt; that are marked
&lt;code&gt;EPOLLLT&lt;/code&gt; in the epoll instance. Every time we call &lt;code&gt;epoll_wait&lt;/code&gt;, we
check the event mask of each &lt;code&gt;epitem&lt;/code&gt; in this list (&lt;code&gt;poll&lt;/code&gt; operation).&lt;/p&gt;

&lt;p&gt;However, we can do better than that, because of the following
observation: a fd is only possible to be readable &amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;after an arrival of data (which is monitored by &lt;code&gt;ET&lt;/code&gt;) (A)&lt;/li&gt;
&lt;li&gt;before the first time after this arrival that we find that this
fd is not readable. (B)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence the implementation of &lt;code&gt;LT&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;add the &lt;code&gt;epitem&lt;/code&gt; to the ready list at data arrival (already done in
&lt;code&gt;ET&lt;/code&gt;) (A)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-9&#34;&gt;&lt;a href=&#34;#fn:fn-9&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;in epoll &lt;code&gt;ep_send_events_proc&lt;/code&gt;:

&lt;ol&gt;
&lt;li&gt;Check the current event (readiness) of the fd of &lt;code&gt;epitem&lt;/code&gt;. If no
monitored events, discard this &lt;code&gt;epitem&lt;/code&gt; from the ready list. (B)&lt;/li&gt;
&lt;li&gt;If it is not discarded, add it back to the &lt;code&gt;rdllist&lt;/code&gt; after writing
the corresponding &lt;code&gt;epoll_event&lt;/code&gt; to the userspace.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can get interesting behavior from this. Consider the following case:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;initialize an epoll instance to monitor one fd (&lt;code&gt;EPOLLIN&lt;/code&gt;,
&lt;code&gt;EPOLLLT&lt;/code&gt;)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;data arrive at this fd&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ep_poll_callback&lt;/code&gt; is called, &lt;code&gt;epitem&lt;/code&gt; of this fd is added to
the ready list.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;epoll_wait&lt;/code&gt;, get an &lt;code&gt;epoll_event&lt;/code&gt; of this fd&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;in &lt;code&gt;ep_send_events_proc&lt;/code&gt;, we take this &lt;code&gt;epitem&lt;/code&gt; off the list
&lt;code&gt;txlist&lt;/code&gt;, write to the user&amp;rsquo;s &lt;code&gt;epoll_event&lt;/code&gt;, and because of
&lt;code&gt;EPOLLLT&lt;/code&gt;, we add this &lt;code&gt;epitem&lt;/code&gt; back to the ready list.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;read all data currently available on this fd. Further read will
block.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;note that, this will not trigger any operation in the
epoll&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-10&#34;&gt;&lt;a href=&#34;#fn:fn-10&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;do nothing for, let&amp;rsquo;s say, a whole day.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;for a whole day, this &lt;code&gt;epitem&lt;/code&gt; sit in the ready list, although
there is no data currently readable on it.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;call &lt;code&gt;epoll_wait&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;in &lt;code&gt;ep_send_events_proc&lt;/code&gt;, we &lt;code&gt;poll&lt;/code&gt; this fd and find that it is
not ready for read. We simply discard this &lt;code&gt;epitem&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;epoll_wait&lt;/code&gt; gets no event.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;summary-of-epoll-wait&#34;&gt;summary of &lt;code&gt;epoll_wait&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;epoll_wait&lt;/code&gt; send events in current ready list to the userspace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ep_poll&lt;/code&gt;: mainly implement the &amp;ldquo;check-and-sleep&amp;rdquo; loop for the
blocking version of &lt;code&gt;epoll_wait&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;when an &lt;code&gt;epoll_wait&lt;/code&gt; is called, &lt;code&gt;ep_poll_callback&lt;/code&gt; should add
&lt;code&gt;epitem&lt;/code&gt; to &lt;code&gt;eventpoll.ovflist&lt;/code&gt; temporarily and when &lt;code&gt;epoll_wait&lt;/code&gt; is
done, content of &lt;code&gt;ovflist&lt;/code&gt; should be moved into &lt;code&gt;rdllist&lt;/code&gt;, the main
ready list. &lt;code&gt;ep_scan_ready_list&lt;/code&gt; handle this.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ep_send_events_proc&lt;/code&gt;: write the &lt;code&gt;epoll_event&lt;/code&gt; of an &lt;code&gt;epitem&lt;/code&gt; to the
output array if feasible. Handle &lt;code&gt;EPOLLONESHOT&lt;/code&gt;, &lt;code&gt;LT&lt;/code&gt; here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more&#34;&gt;more&lt;/h2&gt;

&lt;h3 id=&#34;lock-in-epoll&#34;&gt;lock in epoll&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s see the comment in &lt;code&gt;fs/eventpoll.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * LOCKING:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * There are three level of locking required by epoll :
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * 1) epmutex (mutex)
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * 2) ep-&amp;gt;mtx (mutex)
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * 3) ep-&amp;gt;lock (spinlock)
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a summary of the usage of these locks:&lt;/p&gt;

&lt;p&gt;(&amp;ldquo;W&amp;rdquo; means the lock is held in (almost) the whole function.)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;function name&lt;/th&gt;
&lt;th&gt;epmutex&lt;/th&gt;
&lt;th&gt;ep-&amp;gt;mtx&lt;/th&gt;
&lt;th&gt;ep-&amp;gt;lock&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;epoll_ctl&lt;/td&gt;
&lt;td&gt;handle nested epoll&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ep_scan_ready_list&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;W, except calling &lt;code&gt;ep_send_events_proc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ep_send_events_proc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;(held by caller)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ep_poll_callback&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ep_remove&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;(held by caller)&lt;/td&gt;
&lt;td&gt;when unlinking from &lt;code&gt;rdllist&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ep_modify (EPOLL_CTL_MOD)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;(held by epoll_ctl)&lt;/td&gt;
&lt;td&gt;when(if) adding &lt;code&gt;epitem&lt;/code&gt; to= &lt;code&gt;rdllist&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ep_insert&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;(held by epoll_ctl)&lt;/td&gt;
&lt;td&gt;when(if) adding &lt;code&gt;epitem&lt;/code&gt; to= &lt;code&gt;rdllist&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ep_free (free epoll instance)&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;ep_remove() over RBT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;eventpoll_release_file (auto remove)&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;ep_remove()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;epmutex&#34;&gt;&lt;code&gt;epmutex&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;epmutex&lt;/code&gt; is a global mutex. Its comment is clear:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * This mutex is used to serialize ep_free() and eventpoll_release_file().
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DEFINE_MUTEX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epmutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ep_free&lt;/code&gt; destory the whole epoll instance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventpoll_release_file&lt;/code&gt; is called when a file is closed without
unregistering from epoll.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file.f_ep_links&lt;/code&gt; is a list of &lt;code&gt;epitem&lt;/code&gt; of this file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comment in &lt;code&gt;ep_free&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * We need to lock this because we could be hit by
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * eventpoll_release_file() while we&amp;#39;re freeing the &amp;#34;struct eventpoll&amp;#34;.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * We do not need to hold &amp;#34;ep-&amp;gt;mtx&amp;#34; here because the epoll file
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * is on the way to be removed and no one has references to it
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * anymore. The only hit might come from eventpoll_release_file() but
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * holding &amp;#34;epmutex&amp;#34; is sufficient here.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mutex_lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epmutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;ep-mtx&#34;&gt;&lt;code&gt;ep-&amp;gt;mtx&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This lock is held when doing/avoiding modification on the &lt;code&gt;epitem&lt;/code&gt; in
the epoll (especially removal).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ep_scan_ready_list&lt;/code&gt; hold &lt;code&gt;ep-&amp;gt;mtx&lt;/code&gt; so that &lt;code&gt;epitem&lt;/code&gt; won&amp;rsquo;t vanish from
the ready list because of unregistration.&lt;/p&gt;

&lt;h4 id=&#34;ep-lock&#34;&gt;&lt;code&gt;ep-&amp;gt;lock&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;ep-&amp;gt;lock&lt;/code&gt; protects the ready list &lt;code&gt;rdllist&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;ep-ovflist&#34;&gt;&lt;code&gt;ep-&amp;gt;ovflist&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;We don&amp;rsquo;t want to hold &lt;code&gt;ep-&amp;gt;lock&lt;/code&gt; when copying data to the userspace in
&lt;code&gt;ep_send_events_proc&lt;/code&gt;, because it is relatively slow and will hang up
&lt;code&gt;ep_poll_callback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a solution, we add &lt;code&gt;ep-&amp;gt;ovflist&lt;/code&gt;. When &lt;code&gt;ep_scan_ready_list&lt;/code&gt; is
called, we change &lt;code&gt;ovflist&lt;/code&gt; from unactive to active so that
&lt;code&gt;ep_poll_callback&lt;/code&gt; will add new &lt;code&gt;epitem&lt;/code&gt; to &lt;code&gt;ovflist&lt;/code&gt; temporarily,
without touching &lt;code&gt;ep-&amp;gt;rdllist&lt;/code&gt; and &lt;code&gt;epi-&amp;gt;rdllink&lt;/code&gt;. When
&lt;code&gt;ep_send_events_proc&lt;/code&gt; is done, we move current &lt;code&gt;epitem&lt;/code&gt; in &lt;code&gt;ovflist&lt;/code&gt;
into &lt;code&gt;rdllist&lt;/code&gt; and deactivate &lt;code&gt;ovflist&lt;/code&gt;.&lt;/p&gt;

&lt;h6 id=&#34;why-ovflist-is-necessary&#34;&gt;why &lt;code&gt;ovflist&lt;/code&gt; is necessary?&lt;/h6&gt;

&lt;p&gt;Since we splice &lt;code&gt;rdllist&lt;/code&gt; to a temporary list &lt;code&gt;txlist&lt;/code&gt; in
&lt;code&gt;ep_scan_ready_list&lt;/code&gt;, it seems that it is possible for new &lt;code&gt;epitem&lt;/code&gt; to
be added into &lt;code&gt;rdllist&lt;/code&gt; directly. However, we don&amp;rsquo;t do this because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;both &lt;code&gt;txlist&lt;/code&gt; and &lt;code&gt;rdllist&lt;/code&gt; make use of &lt;code&gt;epitem-&amp;gt;rdllink&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If we try to link an &lt;code&gt;epitem&lt;/code&gt; that is currently in &lt;code&gt;txlist&lt;/code&gt; into
the &lt;code&gt;rdllist&lt;/code&gt;, we will find that &lt;code&gt;rdllink&lt;/code&gt; is already linked and
do nothing. As a result, this new event is &amp;ldquo;merged&amp;rdquo; with the one
in &lt;code&gt;txlist&lt;/code&gt; now&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It seems that this is not what the author(s) want. We don&amp;rsquo;t want
to merge new events with those that are currently transferring to
the userspace. (However, multiple events on one fd before any
&lt;code&gt;epoll_wait&lt;/code&gt; are merged.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(I don&amp;rsquo;t know if such a behavior is necessary or just a
preference.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ep_send_events_proc&lt;/code&gt; may modify &lt;code&gt;rdllist&lt;/code&gt;. If the &lt;code&gt;epitem&lt;/code&gt; is
&lt;code&gt;LT&lt;/code&gt;, we will link it into &lt;code&gt;rdllist&lt;/code&gt; after writing to the
corresponding &lt;code&gt;epoll_event&lt;/code&gt; in userspace.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;add this time, only this &lt;code&gt;ep_send_events_proc&lt;/code&gt; will modify the
&lt;code&gt;rdllist&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;epoll_ctl&lt;/code&gt; and other calls of &lt;code&gt;epoll_wait&lt;/code&gt;
(&lt;code&gt;ep_send_events_proc&lt;/code&gt;) and are locked out by &lt;code&gt;ep-&amp;gt;mtx&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ep_poll_callback&lt;/code&gt; will queue new &lt;code&gt;epitem&lt;/code&gt; in &lt;code&gt;ep-&amp;gt;ovflist&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;epoll-ctl-mod-ep-modify&#34;&gt;EPOLL_CTL_MOD, ep_modify&lt;/h3&gt;

&lt;p&gt;When we call &lt;code&gt;epoll_ctl(EPOLL_CTL_MOD)&lt;/code&gt;, it does some simple check and
call &lt;code&gt;ep_modify&lt;/code&gt; with &lt;code&gt;ep-&amp;gt;mtx&lt;/code&gt; held:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Modify the interest event mask by dropping an event if the new mask
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * has a match in the current file status. Must be called with &amp;#34;mtx&amp;#34; held.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ep_modify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventpoll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epitem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                     &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;modify &lt;code&gt;epitem-&amp;gt;event.events&lt;/code&gt; and &lt;code&gt;epitem-&amp;gt;event.data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if have interesting event now (&lt;code&gt;ep_item_poll&lt;/code&gt;)

&lt;ol&gt;
&lt;li&gt;link into the ready list (with &lt;code&gt;ep-&amp;gt;lock&lt;/code&gt; locked)&lt;/li&gt;
&lt;li&gt;wake up the two queues

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ep-&amp;gt;wq&lt;/code&gt; (&lt;code&gt;ep-&amp;gt;lock&lt;/code&gt; locked)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ep-&amp;gt;poll_wait&lt;/code&gt; (&lt;code&gt;ep-&amp;gt;lock&lt;/code&gt; unlocked)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most interesting thing here is that we check its current readiness
after updating the event mask. If it has some interesting events now,
we add it into the ready list. However, we don&amp;rsquo;t remove it from the
ready list (if it is there) when we find that it has no events
currently monitored. This is ok because we will check its current
events in &lt;code&gt;ep_send_events_proc&lt;/code&gt; again before sending it to the output
array.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;Notice that, this file operation named &lt;code&gt;poll&lt;/code&gt; and the function &lt;code&gt;poll&lt;/code&gt; for I/O multiplexing are different things.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-2&#34;&gt;linux/poll.h
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-3&#34;&gt;Linux Device Drivers, Third Edition
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-4&#34;&gt;net/socket.c
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-5&#34;&gt;find this from &lt;a href=&#34;https://patchwork.kernel.org/patch/10401923/&#34;&gt;https://patchwork.kernel.org/patch/10401923/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-6&#34;&gt;copy from drivers/gpu/drm/nouveau/include/nvif/list.h ???
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-7&#34;&gt;&lt;a href=&#34;http://man7.org/linux/man-pages/man7/epoll.7.html&#34;&gt;http://man7.org/linux/man-pages/man7/epoll.7.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-8&#34;&gt;I use read as an example here. Writing is similar.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-9&#34;&gt;refers to the observation above
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-9&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-10&#34;&gt;maybe not true in some special case
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-10&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
                
                        <author>fd3kyt@fakeEmailToMakeValidatorHappy.com (fd3kyt)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://fd3kyt.github.io/categories/linux">linux</category>
                                
                            
                        
                     
                        
                    
                
                <guid>https://fd3kyt.github.io/posts/implementation-of-epoll/</guid>
                <pubDate>Sun, 27 May 2018 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


